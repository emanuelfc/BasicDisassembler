/*

	x86 Instruction Format - 32 bits

Bytes:				1 each				1/2/3			  1			 1		   0/1/2/4		   0/1/2/4
			+------------------+---------------------+-----------+-------+-----------------+-------------+
			|      Prefix      |       Opcodes       |   ModR/M  |  SIB  |	 Displacement  |  Immediate  |
			+------------------+---------------------+---+-------+--+----+-----------------+-------------+
				  Prefixes 		  1/2/3 byte opcodes	 |			|		0/1/2/4 bytes    0/1/2/4 bytes
			   of 1 byte each							 |			|		of address       immediate of
				 (optional)								 |			|		displacement        data
			(only 1 prefix								 V			|
			 of each	group)		7	 6 5	      3 2	 0		|
									+-----+------------+-----+		|
									| Mod |	Reg/Opcode | R/M |		|
									+-----+------------+-----+		|
										1 byte if required			V
															7	   6 5	    3 2	    0
															+-------+--------+------+
															| Scale |  Index | Base |
															+-------+--------+------+
																1 byte if required

*/
/*

	ModR/M - addressing-form specifier byte, refers to operand in memory
			 Mod + R/M field - 32 possible values - 8 registers and 24 addressing modes
			 Reg/Opcode - specifies register number or 3 more bits of opcode additional info. (specified in the primary opcode)
			 R/M - specifies register as operand or it can be combined with the mod field to encode an
				   addressing mode. Sometimes, certain combinations of the mod field and the r/m field are used to express
				   opcode information for some instructions.
			 
	SIB - second addressing byte
			scale - specifies scale factor
			index - specifies register number of the index register
			base - specifies register number of the base register
			
	Displacement - Some addressing forms include a displacement immediately following the ModR/M byte (or the SIB byte if one is
present). If a displacement is required, it can be 1, 2, or 4 bytes.

	Immediate - If an instruction specifies an immediate operand, the operand always follows any displacement bytes. An immediate
operand can be 1, 2 or 4 bytes.

*/

// x86 Instruction Prefixes

// Group 1 - Lock and Repeat Prefixes

// Lock
/*
	The LOCK prefix (F0H) forces an operation that ensures exclusive use of shared memory in a multiprocessor environment.
*/
#define x86_PREFIX_LOCK 			0xF0 	// Lock

// Repeat
/*
	Repeat prefixes (F2H, F3H) cause an instruction to be repeated for each element of a string.
*/
#define x86_PREFIX_REPNE_REPNZ 		0xF2	// Repeat-not-equal, Repeat-not-zero
#define x86_PREFIX_REP_REPE_REPZ 	0xF3	// Repeat-equal, Repeat-zero

// Group 2 - Segment override, Branch hints

// Segments override

#define x86_PREFIX_SEGMENT_CS		0x2E	// CS segment override
#define x86_PREFIX_SEGMENT_SS		0x36	// CS segment override
#define x86_PREFIX_SEGMENT_DS		0x3E	// CS segment override
#define x86_PREFIX_SEGMENT_ES		0x26	// CS segment override
#define x86_PREFIX_SEGMENT_FS		0x64	// CS segment override
#define x86_PREFIX_SEGMENT_GS		0x65	// CS segment override

// Branch

#define x86_PREFIX_BRANCH_NOT_TAKEN 0x2E	// Branch not taken
#define x86_PREFIX_BRANCH_TAKEN 	0x3E	// Branch taken

// Group 3 - Operands size override
/*
	The operand-size override prefix allows a program to switch between 16- and 32-bit operand sizes. Either size can
	be the default; use of the prefix selects the non-default size. 
*/

#define x86_PREFIX_OPERAND_OVERRIDE 0x66

// Group 4 - Address size override
/*
	The address-size override prefix (67H) allows programs to switch between 16- and 32-bit addressing. Either size
	can be the default; the prefix selects the non-default size. Using this prefix and/or other undefined opcodes when
	operands for the instruction do not reside in memory is reserved; such use may cause unpredictable behavior.
*/

#define x86_PREFIX_ADDRESS_OVERRIDE 0x67

/*

prefix | name
-------+-----------------------
  0xf0 | LOCK
  0xf2 | REPNE/REPZ
  0xf3 | REPE/REPZ
       |
  0x2e | CS Segment override
  0x36 | SS Segment override
  0x3e | DS Segment override
  0x26 | ES Segment override
  0x64 | FS Segment override
  0x65 | GS Segment override
       |
  0x2e | *Branch not taken
  0x3e | *Branch taken
       |
  0x66 | Operand-size override
  0x67 | Address-size override
 
*for use only with Jcc instructions
	
	x86 Opcodes
	
	A primary opcode can be 1, 2, or 3 bytes in length. An additional 3-bit opcode field is sometimes encoded in the
ModR/M byte. Smaller fields can be defined within the primary opcode. Such fields define the direction of operation,
size of displacements, register encoding, condition codes, or sign extension. Encoding fields used by an
opcode vary depending on the class of operation.


	Two-byte Opcodes formats follow one of the following:
	
	- An escape opcode byte 0x0F as the primary opcode and a second opcode byte.
	- A mandatory prefix (66H, F2H, or F3H), an escape opcode byte, 
	and a second opcode byte (same as previous point).

	Three-byte Opcodes formats follow one of the following:
	- An escape opcode byte 0FH as the primary opcode, plus two additional opcode bytes.
	- A mandatory prefix (66H, F2H, or F3H), an escape opcode byte, 
	plus two additional opcode bytes (same as previous point).
		Three-byte opcodes that are 4 bytes in length begin with a 
		mandatory prefix (0x66, 0xF2, or 0xF3) and two escape bytes (0x0F 0x38 or 0x0F 0x3A).

*/

// Escape Codes

#define x86_ESC_OPCODE_1BYTE 	0x0F
#define x86_ESC_OPCODE_2BYTE_1 	0x3A
#define x86_ESC_OPCODE_2BYTE_2 	0x38

const uint8_t x86_opcode_attribute_table_1bytes =
{
	[0x00] = ,
	[0x01] = ,
	[0x02] = ,
	[0x03] = ,
	[0x04] = ,
	[0x05] = ,
	[0x06] = ,
	[0x07] = ,
	[0x08] = ,
	[0x09] = ,
	[0x0A] = ,
	[0x0B] = ,
	[0x0C] = ,
	[0x0D] = ,
	[0x0E] = ,
	[0x0F] = ESCAPE_CODE,
	[0x10] = ,
	[0x11] = ,
	[0x12] = ,
	[0x13] = ,
	[0x14] = ,
	[0x15] = ,
	[0x16] = ,
	[0x17] = ,
	[0x18] = ,
	[0x19] = ,
	[0x1A] = ,
	[0x1B] = ,
	[0x1C] = ,
	[0x1D] = ,
	[0x1E] = ,
	[0x1F] = ,
	[0x20] = ,
	[0x21] = ,
	[0x22] = ,
	[0x23] = ,
	[0x24] = ,
	[0x25] = ,
	[0x26] = PREFIX,
	[0x27] = ,
	[0x28] = ,
	[0x29] = ,
	[0x2A] = ,
	[0x2B] = ,
	[0x2C] = ,
	[0x2D] = ,
	[0x2E] = PREFIX,
	[0x2F] = ,
	[0x30] = ,
	[0x31] = ,
	[0x32] = ,
	[0x33] = ,
	[0x34] = ,
	[0x35] = ,
	[0x36] = PREFIX,
	[0x37] = ,
	[0x38] = ESCAPE_CODE,
	[0x39] = ,
	[0x3A] = ESCAPE_CODE,
	[0x3B] = ,
	[0x3C] = ,
	[0x3D] = ,
	[0x3E] = PREFIX,
	[0x3F] = ,
	[0x40] = ,
	[0x41] = ,
	[0x42] = ,
	[0x43] = ,
	[0x44] = ,
	[0x45] = ,
	[0x46] = ,
	[0x47] = ,
	[0x48] = ,
	[0x49] = ,
	[0x4A] = ,
	[0x4B] = ,
	[0x4C] = ,
	[0x4D] = ,
	[0x4E] = ,
	[0x4F] = ,
	[0x50] = ,
	[0x51] = ,
	[0x52] = ,
	[0x53] = ,
	[0x54] = ,
	[0x55] = ,
	[0x56] = ,
	[0x57] = ,
	[0x58] = ,
	[0x59] = ,
	[0x5A] = ,
	[0x5B] = ,
	[0x5C] = ,
	[0x5D] = ,
	[0x5E] = ,
	[0x5F] = ,
	[0x60] = ,
	[0x61] = ,
	[0x62] = ,
	[0x63] = ,
	[0x64] = PREFIX,
	[0x65] = PREFIX,
	[0x66] = PREFIX,
	[0x67] = PREFIX,
	[0x68] = ,
	[0x69] = ,
	[0x6A] = ,
	[0x6B] = ,
	[0x6C] = ,
	[0x6D] = ,
	[0x6E] = ,
	[0x6F] = ,
	[0x70] = ,
	[0x71] = ,
	[0x72] = ,
	[0x73] = ,
	[0x74] = ,
	[0x75] = ,
	[0x76] = ,
	[0x77] = ,
	[0x78] = ,
	[0x79] = ,
	[0x7A] = ,
	[0x7B] = ,
	[0x7C] = ,
	[0x7D] = ,
	[0x7E] = ,
	[0x7F] = ,
	[0x80] = ,
	[0x81] = ,
	[0x82] = ,
	[0x83] = ,
	[0x84] = ,
	[0x85] = ,
	[0x86] = ,
	[0x87] = ,
	[0x88] = ,
	[0x89] = ,
	[0x8A] = ,
	[0x8B] = ,
	[0x8C] = ,
	[0x8D] = ,
	[0x8E] = ,
	[0x8F] = ,
	[0x90] = ,
	[0x91] = ,
	[0x92] = ,
	[0x93] = ,
	[0x94] = ,
	[0x95] = ,
	[0x96] = ,
	[0x97] = ,
	[0x98] = ,
	[0x99] = ,
	[0x9A] = ,
	[0x9B] = ,
	[0x9C] = ,
	[0x9D] = ,
	[0x9E] = ,
	[0x9F] = ,
	[0xA0] = ,
	[0xA1] = ,
	[0xA2] = ,
	[0xA3] = ,
	[0xA4] = ,
	[0xA5] = ,
	[0xA6] = ,
	[0xA7] = ,
	[0xA8] = ,
	[0xA9] = ,
	[0xAA] = ,
	[0xAB] = ,
	[0xAC] = ,
	[0xAD] = ,
	[0xAE] = ,
	[0xAF] = ,
	[0xB0] = ,
	[0xB1] = ,
	[0xB2] = ,
	[0xB3] = ,
	[0xB4] = ,
	[0xB5] = ,
	[0xB6] = ,
	[0xB7] = ,
	[0xB8] = ,
	[0xB9] = ,
	[0xBA] = ,
	[0xBB] = ,
	[0xBC] = ,
	[0xBD] = ,
	[0xBE] = ,
	[0xBF] = ,
	[0xC0] = ,
	[0xC1] = ,
	[0xC2] = ,
	[0xC3] = ,
	[0xC4] = ,
	[0xC5] = ,
	[0xC6] = ,
	[0xC7] = ,
	[0xC8] = ,
	[0xC9] = ,
	[0xCA] = ,
	[0xCB] = ,
	[0xCC] = ,
	[0xCD] = ,
	[0xCE] = ,
	[0xCF] = ,
	[0xD0] = ,
	[0xD1] = ,
	[0xD2] = ,
	[0xD3] = ,
	[0xD4] = ,
	[0xD5] = ,
	[0xD6] = ,
	[0xD7] = ,
	[0xD8] = ,
	[0xD9] = ,
	[0xDA] = ,
	[0xDB] = ,
	[0xDC] = ,
	[0xDD] = ,
	[0xDE] = ,
	[0xDF] = ,
	[0xE0] = ,
	[0xE1] = ,
	[0xE2] = ,
	[0xE3] = ,
	[0xE4] = ,
	[0xE5] = ,
	[0xE6] = ,
	[0xE7] = ,
	[0xE8] = ,
	[0xE9] = ,
	[0xEA] = ,
	[0xEB] = ,
	[0xEC] = ,
	[0xED] = ,
	[0xEE] = ,
	[0xEF] = ,
	[0xF0] = PREFIX,
	[0xF1] = ,
	[0xF2] = PREFIX,
	[0xF3] = PREFIX,
	[0xF4] = ,
	[0xF5] = ,
	[0xF6] = ,
	[0xF7] = ,
	[0xF8] = ,
	[0xF9] = ,
	[0xFA] = ,
	[0xFB] = ,
	[0xFC] = ,
	[0xFD] = ,
	[0xFE] = ,
	[0xFF] = 
}